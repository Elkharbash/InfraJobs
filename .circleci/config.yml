version: 2.1
# Use a package of configuration called an orb.
#orbs:
  # Choose either one of the orbs below
  # welcome: circleci/welcome-orb@0.4.1
  # aws-cli: circleci/aws-cli@2.0.3
# Define the jobs we want to run for this project
commands:
  destroy_environment:
    steps:
      - run:
          name: Destroy environment and cloud resources if anything fails
          command: |
            aws cloudformation delete-stack --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:7}
jobs:
  create_infrastructure:  # Choose any name, such as `build`
      # The primary container, where your job's commands will run
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout # check out the code in the project directory
        - run:
            name: Create CloudFormation Stack
            command: |
              aws cloudformation deploy \
                --template-file template.yml \
                --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:7} \
                --region us-east-1
  configure_infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["a4:25:da:b2:02:3f:72:5a:75:ea:04:71:00:96:58:d3"]
      - run:
          name: Install Ansible
          command: |
            apk add --update ansible

      - run:
          name: Run Playbook and configure server
          command: |
            ansible-playbook -i inventory.txt main-remote.yml
  smoke_test:
    docker:
      - image: alpine:latest
    steps:
      - run:
          name: smoke test
          command: return 1
            # URL="https://blog.udacity.com/"
            # # Test if website exists
            # if curl -s --head ${URL} 
            # then
            #   return 0
            # else
            #   return 1
            # fi
      - destroy_environment:


# Sequential workflow
workflows:
  # Name the workflow
  myWorkflow:
    jobs:
      - create_infrastructure
    #  - configure_infrastructure
      - smoke_test:
          requires:
            - create_infrastructure
